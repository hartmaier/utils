#!/bin/bash

#  dellycircos-conf-gen.sh
#
#
#  Created by Hartmaier, Ryan on 9/24/14.
#

usage () {
echo "
USAGE: $0

This program is a batch configuration file generator for circos.  It expects SV calls (by delly) are previously filtered and converted to circos format with vcf2circos.sh.

    -s [filename]       (required) Input delly .circos file generated by vcf2circos.sh
    -c [filename]       (optional) Copy number file. This can be a comma separated list of multiple files (<3). Data should be segmented and in log2 scale in the following format (chr[TAB]start[TAB]stop[TAB]log2CN)
    -m [filename]       (optional) Mutation file. This can be a comma separate list of multiple files (<2). Format should be BED format.
    -a [number]         (optional) Max scale for mutation plot. Default is 20.
    -o [path]           (optional) Path to output circos directory (default output is in current directory)
    -n [basename]       (optional) Basename for output file (will default to input delly file name)
    -y [chromosomes]    (optional) List of semi-colon separated chromosomes to view. Remember to put in double quotes so Unix interprets this properly (default will display all chromosomes)
    -z [filename]       (optional) Regions to highlight in circos plot. Must be in BED format.
    -h                  This help menu
"
}

## ORDER OF DATA IN CIRCOS FIGURE (OUT TO IN)
# 1. Genome
# 2. Highlights
# 3. CNV
# 4. Mutation
# 5. SV


unset sv
mutect_scale=20
while getopts ":s:c:o:n:m:a:y:z:h" option; do
    case ${option} in
        s)
            sv=${OPTARG}
            ;;
        c)
            cn=${OPTARG}
            ;;
        m)
            mutect=${OPTARG}
            ;;
        a)
            mutect_scale=${OPTARG}
            ;;
        o)
            circos_dir=${OPTARG}
            ;;
        n)
            base_name=${OPTARG}
            ;;
        y)
            chromosomes=${OPTARG}
            ;;
        z)
            highlights=${OPTARG}
            ;;
        h)
            usage
            exit 0
            ;;
        :)
            echo -e "\nERROR: -${OPTARG} requires an argument"
            usage
            exit 1
            ;;
        ?)
            echo -e "\nERROR: unknown option -${OPTARG}"
            usage
            exit 1
            ;;
    esac
done

if [ -z $sv ]; then
    usage
    exit 0
fi

if [ -z $base_name ]; then
    base_name=`basename $sv | rev | cut -d "." -f 2- | rev`
    echo "WARNING: Basename was set to: $base_name"
fi

if [ -z "$circos_dir" ]; then
    echo "WARNING: -o was not specified, using current directory for output"
    $circos_dir="./circos"
    if [ -d $circos_dir ]; then
        echo "ERROR: Output directory: $circos_dir already exists"
        exit 1
    fi
fi

if [ ! -d "$circos_dir" ]; then
    mkdir $circos_dir
fi

if [ ! -d "$circos_dir/conf" ]; then
    mkdir $circos_dir/conf
fi
if [ ! -d "$circos_dir/images" ]; then
    mkdir $circos_dir/images
fi

# These variables are used to track the radius' for the various data tracks depending on what data is to be drawn.
r_offset_highlight=0
r_offset_cn=0
r_offset_mut=0
r_offset_sv=0


if [ -z $mutect ]; then
    num_mut_files=0
else
    num_mut_files=`echo $mutect | awk -F ',' '{print NF}'`
fi
mutect_filebase="mutect.$num_mut_files"

if [ -z $cn ]; then
    num_cn_files=0
else
    num_cn_files=`echo $cn | awk -F ',' '{print NF}'`
fi
cn_filebase="cn.$num_cn_files"

if [ $num_cn_files -gt 4 ] || [ $num_mut_files -gt 4 ]; then
    echo -e "\n ERROR: too many copy number or mutation files were submitted.\n"
    usage
    exit 1
fi

if [ -z $chromosomes ]; then
    chromosomes="/chr[\d\d?|X|x]/"
    chromosomes_filebase="chr.all"
else
    chromosomes_filebase="chr.$chromosomes"
fi

if [ ! -z $highlights ]; then
    highlights_basename=`basename $highlights`
fi

file_end_full=$cn_filebase.$mutect_filebase.$chromosomes_filebase.$highlights_basename
file_end=`echo $file_end_full | tr -s . | sed 's/\.$//g'`
circos_file=$base_name.$file_end

echo "
##########
PARAMETERS
##########

    OUTPUT CIRCOS CONF FILE = $circos_file
    SV FILE = $sv
    CN FILES = $cn
        Number = $num_cn_files
    MUTATION FILE = $mutect
        Number = $num_mut_files
    CHROMOSOMES TO DISPLAY = $chromosomes"

if [ ! -z $highlights ]; then
echo "\
    HIGHLIGHTS FILE = $highlights"
fi

# Output base parameters for configuration file
echo "
##########

<<include /Volumes/GenomicsIII/Tumor_Samples/circos_files/colors_fonts_patterns.conf>>
<<include /Volumes/GenomicsIII/Tumor_Samples/circos_files/housekeeping.conf>>
<<include /Volumes/GenomicsIII/Tumor_Samples/circos_files/ideogram.conf>>
<<include /Volumes/GenomicsIII/Tumor_Samples/circos_files/ticks.conf>>

## Uncomment for black background images ##
# This switches black and white #
#<colors>
#black=255,255,255
#white=0,0,0
#</colors>
#######


<ideogram>
show_bands=no
</ideogram>

karyotype   = /Volumes/GenomicsIII/Tumor_Samples/circos_files/karyotype.human.hg19.txt

<image>
dir = $circos_dir/images/
file  = $circos_file.png
png = yes

# radius of inscribed circle in image
radius         = 1500p
#radius          = 7500
#background     = clear
background      = white
# by default angle=0 is at 3 o'clock position
angle_offset   = -90

#angle_orientation = counterclockwise

auto_alpha_colors = yes
auto_alpha_steps  = 5

</image>

chromosomes_units = 1000000
chromosomes       = $chromosomes
chromosomes_display_default = no
" >$circos_dir/conf/$circos_file.conf

if [ ! -z $highlights ]; then
    r_offset_highlight=`echo $r_offset_highlight+0.05 | bc`
    r_offset_sv=`echo "$r_offset_sv+0.05" | bc`
    r_offset_cn=`echo "$r_offset_cn+0.05" | bc`
    r_offset_mut=`echo "$r_offset_mut+0.05" | bc`

    echo "
<highlights>
<highlight>
file = $highlights
stroke_thickness = 5
stroke_color = black
fill_color = black
r0 = eval((1-$r_offset_highlight).'r')
r1 = eval((1-$r_offset_highlight+0.03).'r')
</highlight>
</highlights>

" >>$circos_dir/conf/$circos_file.conf
fi

### START OF PLOTS
if [ ! -z $cn ] || [ ! -z $mutect ]; then
    echo "
<plots>
">>$circos_dir/conf/$circos_file.conf
fi

### COPY NUMBER ###
if [ ! -z $cn ]; then
    r_offset_sv=`echo "$r_offset_sv+0.2" | bc`
    r_offset_cn=`echo "$r_offset_cn+0.2" | bc`
    r_offset_mut=`echo "$r_offset_mut+0.2" | bc`


    for i in $(seq 1 $num_cn_files)
    do

        r0=`echo "1-$r_offset_cn" | bc`
        r1=`echo "1-$r_offset_cn+0.2" | bc`

        r0p=`echo "scale=3; $r1-$i*(($r1-$r0)/$num_cn_files)" | bc`
        r1p=`echo "scale=3; $r1-0.01-($i-1)*(($r1-$r0)/$num_cn_files)" | bc`

        file_cn=`echo $cn | cut -d ',' -f $i`

        echo "
################
### CNV DATA ###
################

<plot>
min=-4
max=4

file = $file_cn
type = histogram

r0 = eval(($r0p).'r')
r1 = eval(($r1p).'r')

extend_bin = no

#color = black
#thickness = 2

<axes>
show = yes

<axis>
color = vlgrey
thickness = 1
spacing = 0.25r
</axis>

<axis>
color = black
thickness = 2
position=0.5r
</axis>

</axes>

<rules>
# DELETIONS = green
<rule>
condition  = var(value) < 0
color      = green
fill_color = lgreen
flow       = continue
</rule>

<rule>
condition  = var(value) < -0.5
color      = green
fill_color = green
flow       = continue
</rule>

<rule>
condition  = var(value) < -1
color      = green
fill_color = dgreen
flow       = continue
</rule>

<rule>
condition  = var(value) < -2
color      = green
fill_color = vdgreen
</rule>

# AMPLIFICATION = red
<rule>
condition  = var(value) > 0
color      = red
fill_color = lred
flow       = continue
</rule>

<rule>
condition  = var(value) > 0.5
color      = red
fill_color = red
flow       = continue
</rule>

<rule>
condition  = var(value) > 1
color      = red
fill_color = dred
flow       = continue
</rule>

<rule>
condition  = var(value) > 2
color      = red
fill_color = vdred
</rule>

</rules>
</plot>

">> $circos_dir/conf/$circos_file.conf
done
fi

### MUTATION DATA ###
if [ ! -z $mutect ]; then
    r_offset_sv=`echo "$r_offset_sv+0.2" | bc`
    r_offset_mut=`echo "$r_offset_mut+0.2" | bc`

    for i in $(seq 1 $num_mut_files)
    do
#        echo "i=$i"
#        echo "num_mut_files=$num_mut_files"


        r0=`echo "1-$r_offset_mut" | bc`
#        echo "r0=$r0"
        r1=`echo "1-$r_offset_mut+0.2" | bc`
#        echo "r1=$r1"

        r0p=`echo "scale=3; $r1-($i*(($r1-$r0)/$num_mut_files))" | bc`
#        echo "r0p=$r0p"
        r1p=`echo "scale=3; $r1-0.01-(($i-1)*(($r1-$r0)/$num_mut_files))" | bc`
#        echo "r1p=$r1p"

        file_mut=`echo $mutect | cut -d ',' -f $i`

    echo "
################
### SNV DATA ###
################
<plot>

min=0
max=$mutect_scale

file = $file_mut
type = histogram

orientation = in

r0 = eval(($r0p).'r')
r1 = eval(($r1p).'r')

extend_bin = no

color = black
thickness = 2

if

<axes>
show = yes
<axis>
color = black
thickness = 2
position=0r
</axis>

<axis>
color = vlgrey
thickness = 1
spacing = 0.5r
</axis>

</axes>

</plot>


### END OF SNV DATA
">> $circos_dir/conf/$circos_file.conf
done
fi

### END OF PLOTS
if [ ! -z $cn ] || [ ! -z $mutect ]; then
    echo "
</plots>
">>$circos_dir/conf/$circos_file.conf
fi

### START OF LINKS

echo "
#############################
### STRUCTURAL VARIATIONS ###
#############################



<links>
<link>

radius = eval((1-$r_offset_sv-0.01).'r')

show         = yes
color        = black
thickness    = 4p
file         = $sv

<rules>


# closely spaced intrachromosomal links
# go outside ideogram circle
<rule>
importance = 90
condition = var(intrachr)
condition = abs(var(START1)-var(START2)) < 40Mb
bezier_radius = eval((1-$r_offset_sv-0.18).'r')
#thickness  = eval(max(1,min(6,exp(var(SIZE1)/50000))))
crest         = 1
</rule>

# interchromosomeal links involving start
# of chromosome are inside circle
<rule>
importance = 80
condition  = var(interchr)
bezier_radius = eval((1-$r_offset_sv-0.18).'r')
bezier_radius_purity = 1
crest         = 1
</rule>

</rules>
</link>
</links>

### END OF STRUCTURAL VARIATION DATA ###
" >> $circos_dir/conf/$circos_file.conf

circos -debug ideogram -conf $circos_dir/conf/$circos_file.conf
